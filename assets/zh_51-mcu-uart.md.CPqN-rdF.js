import{_ as s,c as i,o as a,a2 as n}from"./chunks/framework.CAtmHNXG.js";const l="/learn-embedded-system/assets/91a3e480751fb0b9bea7db8ba073ae80f543ea41141e63c086654e84dbcea1a7.BAZFzpqY.png",y=JSON.parse('{"title":"51单片机串口通讯","description":"","frontmatter":{},"headers":[],"relativePath":"zh/51-mcu-uart.md","filePath":"zh/51-mcu-uart.md"}'),h={name:"zh/51-mcu-uart.md"},k=n('<h1 id="_51单片机串口通讯" tabindex="-1">51单片机串口通讯 <a class="header-anchor" href="#_51单片机串口通讯" aria-label="Permalink to &quot;51单片机串口通讯&quot;">​</a></h1><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><ul><li>已完成<a href="./51-mcu-timer.html">51单片机定时器</a></li></ul><h2 id="_51单片机与个人电脑进行通信" tabindex="-1">51单片机与个人电脑进行通信 <a class="header-anchor" href="#_51单片机与个人电脑进行通信" aria-label="Permalink to &quot;51单片机与个人电脑进行通信&quot;">​</a></h2><h3 id="目标" tabindex="-1">目标 <a class="header-anchor" href="#目标" aria-label="Permalink to &quot;目标&quot;">​</a></h3><p>通过<code>串口监视器</code>向<code>单片机</code>发送一个字符后, <code>单片机</code>返回相同字符.</p><h3 id="原理" tabindex="-1">原理 <a class="header-anchor" href="#原理" aria-label="Permalink to &quot;原理&quot;">​</a></h3><p>原理其实是挺复杂的, 不信你看时序图. 但是程序实现非常简单, 只需要操作3个寄存器就可以了. <img src="'+l+`" alt="picture 0"></p><blockquote><p>STC89C52RC数据手册, 8 串行口通信</p></blockquote><p>发送数据:</p><ol><li>单片机发送第一个 byte 的时候, 只需要向<code>SBUF</code>寄存器写入 1byte, 数据就发出去了. 发送过程中<code>TI</code>寄存器会被硬件置为0, 发送完成后<code>TI</code>寄存器会被硬件置1.</li><li>发送第2个 byte 的时候, 需要先将<code>TI</code>寄存器软件置0, 然后再向<code>SBUF</code>寄存器写入第2个 byte.</li></ol><p>接收数据:</p><ol><li>接收数据可以在中断响应函数中完成, 毕竟电脑随时都可能会向单片机发送数据.</li><li>在中断响应函数中, 如果发现<code>RI</code>寄存器等于1, 说明当前中断是接受中断, 程序可以直接从<code>SBUF</code>寄存器中读取数据. 完事了记得将<code>RI</code>寄存器置1, 好接收下一 byte 数据.</li></ol><h3 id="接线" tabindex="-1">接线 <a class="header-anchor" href="#接线" aria-label="Permalink to &quot;接线&quot;">​</a></h3><p>接线<code>开发板原理图</code>中已给出, 主要就是要记得</p><ul><li>单片机的<code>RX</code>要和目标设备的<code>TX</code>相连接, 单片机的<code>TX</code>要和目标设备的<code>RX</code>相连接.</li><li>单片机不能直接和个人电脑进行通信, 它们之间还需要连接一个<code>CH340G</code>芯片.</li></ul><h3 id="程序" tabindex="-1">程序 <a class="header-anchor" href="#程序" aria-label="Permalink to &quot;程序&quot;">​</a></h3><p>示例代码 codes/demo205-51-uart</p><p>定时器初始值计算公示</p><ul><li>定时器初始值 = 定时器最大值 - (系统时钟频率 / 定时器分频数) / (波特率 * (32 / 2^SMOD))</li><li>定时器初始值 = 256 - (11059200 / 12) / (9600 * (32 / 2^1)) = 250 = 0xFA</li></ul><p>进一步解释</p><ol><li>那么每秒晶振输出 11059200 个脉冲, 每秒<code>定时器</code>计时器增加 (11059200 / 12) = 921_600</li><li>假设波特率使用 9600. 这就意味着<code>TX Clock</code>的时钟频率为 9600. 这个时钟的来源是<code>定时器</code>溢出, <code>定时器</code>溢出1次产生1个脉冲, 而后经过16分频(<code>SMOD</code>为1)得到最终的<code>TX Clock</code>的时钟, 也就是说定时器溢出16次, <code>TX Clock</code>是出现一个脉冲. 所以<code>定时器</code>每秒需要溢出频率 9600 * 16 = 153_600 次</li><li>在1秒内, <code>定时器</code>计时器增加了 921_600 次, 其中 153_600 次<code>定时器</code>出现了溢出. 那么每次<code>定时器</code>溢出计数器增加了 921_600 / 153_600 = 6. 假设<code>定时器</code>工作在模式2(8位自动重装载模式), 该模式下计数器最大值为 2^8 = 256. 得到<code>定时器</code>的起始值应该为 256 - 6 = 250 = 0xFA</li></ol><div class="vp-code-group vp-adaptive-theme"><div class="tabs"><input type="radio" name="group-ayvcY" id="tab-zL0qPnz" checked="checked"><label for="tab-zL0qPnz">main.c</label></div><div class="blocks"><div class="language-c vp-adaptive-theme active"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;8052.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdint.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;delay.h&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uart_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TMOD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&amp;=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0F</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">       // 清除高8位</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TMOD </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">00100000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 定时器1, 模式2, 8位自动重装载模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TH1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 设置波特率为9600</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TL1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0x</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">FA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 设置波特率</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ET1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 禁止定时器中断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TR1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 启动定时器1</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  PCON </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">|=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> 0b</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10000000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // SMOD = 1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SM0 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 设置工作模式为方式1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SM1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 设置工作模式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SM2 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 只有在接收到有效停止位时才将中断请求标志位RI置为1</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  REN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 使能串口接收</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  ES </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 使能串口中断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  EA </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            // 使能总中断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uart_send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  SBUF </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> data;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">      // 将数据写入缓冲区</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (TI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 等待数据发送完成</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  TI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">           // 清除发送完成标志</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uart_print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">char*</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uart_send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">msg</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">++</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 中断号为4的原因: STC89C52RC数据手册, 第6章 中断系统</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> uart_isr</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">__interrupt</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (RI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">          // 如果是接收中断</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    RI </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">               // 清除接收标志</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    char</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> received_data </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> SBUF;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">  // 读取接收到的数据</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uart_send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(received_data);</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   // 发送接受到的数据</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">void</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  uart_init</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  while</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    uart_print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Hello from MCU</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">    delay_ms</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></div></div><h2 id="可选-什么是串口" tabindex="-1">(可选)什么是串口? <a class="header-anchor" href="#可选-什么是串口" aria-label="Permalink to &quot;(可选)什么是串口?&quot;">​</a></h2><p>串口(Serial Port), 全称为<strong>串行通信端口</strong>, 是一种用于数据传输的接口. 与并口(并行端口)不同, 串口一次只传输一位(bit)数据, 但它的数据传输线较少, 通常只需要一根数据线, 因此在长距离传输上更有优势. 串口是计算机和外设之间进行通信的一种常见方式, 广泛应用于各种嵌入式系统和工业设备中.</p><h3 id="串口的特点" tabindex="-1">串口的特点 <a class="header-anchor" href="#串口的特点" aria-label="Permalink to &quot;串口的特点&quot;">​</a></h3><ul><li><strong>数据传输方式</strong>：串行通信一次只传输一位数据, 数据位按顺序排队依次传输.</li><li><strong>传输速率</strong>：用波特率(Baud Rate)表示, 常见的波特率有9600、19200、115200等.</li><li><strong>通信距离</strong>：由于串口只使用一根数据线, 相对于并口, 在长距离传输中信号衰减小, 抗干扰能力强.</li></ul><h3 id="常见的串口类型" tabindex="-1">常见的串口类型 <a class="header-anchor" href="#常见的串口类型" aria-label="Permalink to &quot;常见的串口类型&quot;">​</a></h3><ol><li><strong>RS-232</strong>：最常见的串口标准之一, 常用于计算机和调制解调器之间的通信. RS-232接口的最大传输距离为15米左右, 通常用于短距离通信.</li><li><strong>RS-485</strong>：相比RS-232, RS-485可以支持更长距离的传输(通常可以达到1200米), 并且支持多点通信(即一个主机可以与多个设备通信), 常用于工业控制环境.</li><li><strong>UART(Universal Asynchronous Receiver/Transmitter)</strong>：是用于串行通信的硬件模块, 广泛集成在微控制器(如51单片机)中, 用于实现串行数据的发送和接收.</li></ol><h3 id="串口的基本信号" tabindex="-1">串口的基本信号 <a class="header-anchor" href="#串口的基本信号" aria-label="Permalink to &quot;串口的基本信号&quot;">​</a></h3><ul><li><strong>TXD(Transmit Data)</strong>：发送数据端, 负责发送数据.</li><li><strong>RXD(Receive Data)</strong>：接收数据端, 负责接收数据.</li><li><strong>GND(Ground)</strong>：地线, 提供信号的参考电平.</li><li><strong>RTS(Request To Send)和CTS(Clear To Send)</strong>：用于硬件流控制的信号线(可选).</li></ul><h3 id="应用" tabindex="-1">应用 <a class="header-anchor" href="#应用" aria-label="Permalink to &quot;应用&quot;">​</a></h3><ul><li><strong>调试</strong>：嵌入式开发中, 串口常用作调试接口, 用于输出调试信息.</li><li><strong>设备控制</strong>：常用于计算机控制外设, 如PLC、传感器、执行器等.</li><li><strong>数据传输</strong>：设备之间的数据传输, 如GPS模块、蓝牙模块等.</li></ul>`,33),t=[k];function p(e,d,r,E,g,o){return a(),i("div",null,t)}const F=s(h,[["render",p]]);export{y as __pageData,F as default};
